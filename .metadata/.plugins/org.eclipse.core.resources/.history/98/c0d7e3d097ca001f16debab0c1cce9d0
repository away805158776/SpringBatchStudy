package com.example.demo.config.jdbc;

import java.nio.charset.StandardCharsets;

import javax.sql.DataSource;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.database.JdbcCursorItemReader;
import org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;
import org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.core.io.ClassPathResource;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.transaction.PlatformTransactionManager;

import com.example.demo.config.BaseConfig;
import com.example.demo.domain.model.Employee;

public class JdbcCursorBatchConfig extends BaseConfig {
	
	@Autowired
	private DataSource dataSource;
	
	private static final Stirng SELECT_EMPLOYEE_SQL = "SELECT * FROM employee where gender = ?";

	@Bean
	@StepScope
	JdbcCursorItemReader<Employee> jdbcCursorReader() {
		
		Object[] params = new Object[] {1};
		
		RowMapper<Employee> rowMapper = new BeanPropertyRowMapper<>(Employee.class);
		
		return new JdbcCursorItemReaderBuilder<Employee>()
				.dataSource(this.dataSource)
				.name("jdbcCursorItemReader")
				.sql(SELECT_EMPLOYEE_SQL)
				.queryArguments(params)
				.rowMapper(rowMapper)
				.build();
	}
	
	@Bean
	exportJdbcCursorStep(JobRepository jobRepository, PlatformTransactionManager transactionManager) throws Exception {
		
		return new StepBuilder("ExportJdbcCursorStep", jobRepository)
				.<Employee, Employee>chunk(10, transactionManager)
				.reader(jdbcCursorReader()).listener(readListener)
				.processor(this.genderConvertProcessor)
				.writer(csvWriter()).listener(writeListener)
				.build();
	}
	
	@Bean("JdbcCursorJob")
	Job exportJdbcCursorJob(JobRepository jobRepository, PlatformTransactionManager transactionManager, Step exportJdbcCursorStep) throws Exception{
		return new JobBuilder("ExportJdbcCursorJob", jobRepository)
				.incrementer(new RunIdIncrementer())
				.start(exportJdbcCursorStep)
				.build();
	}
}




@Bean
@StepScope
FlatFileItemReader<Employee> csvReader(){
	String[] nameArray = new String[] {"id", "name", "age", "genderString"};
	
	return new FlatFileItemReaderBuilder<Employee>()
			.name("employeeCsvReader")
			.resource(new ClassPathResource(property.getCsvPath()))
			.linesToSkip(1)
			.encoding(StandardCharsets.UTF_8.name())
			.delimited()
			.names(nameArray)
			.fieldSetMapper(new BeanWrapperFieldSetMapper<Employee>() {
				{
					setTargetType(Employee.class);
				}
			})
			.build();
}

@Bean
Step csvImportJdbcStep(JobRepository jobRepository, PlatformTransactionManager transactionManager) {
	return new StepBuilder("CsvImportJdbcStep", jobRepository)
			.<Employee, Employee>chunk(10, transactionManager)
			.reader(csvReader()).listener(this.readListener)
//			.processor(genderGenderConvertProcessor).listener(this.processListener)
			.processor(compositeProcessor()).listener(this.processListener)
			.writer(jdbcWriter()).listener(this.writeListener)
			.build();
}

@Bean("JdbcJob")
Job csvImportJdbcJob(JobRepository jobRepository, PlatformTransactionManager transactionManager, Step csvImportJdbcStep) {
	return new JobBuilder("CsvImportJdbcJob", jobRepository)
			.incrementer(new RunIdIncrementer())
			.start(csvImportJdbcStep)
			.build();
}